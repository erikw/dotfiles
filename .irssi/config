# Erik Westrup's irssi configuration.
# irvine version

servers = (
  {
    address = "chat.freenode.net";
    chatnet = "Freenode";
    port = "7000";
    use_ssl = "yes";
    family = "inet";
    autoconnect = "yes";
  },
  {
    address = "irc.quakenet.org";
    chatnet = "QuakeNet";
    port = "6667";
    autoconnect = "yes";
  },
  {
    address = "efnet.portlane.se";
    chatnet = "EFNet";
    port = "6667";
    autoconnect = "yes";
  },
  {
    address = "127.0.0.5";
    chatnet = "BitlBee";
    port = "6667";
    autoconnect = "no";
  },
  {
    address = "irc.mozilla.org";
    chatnet = "Mozilla";
    port = "6667";
    autoconnect = "no";
  },
  {
    address = "irc.undernet.org";
    chatnet = "Undernet";
    port = "6667";
    autoconnect = "no";
  },
  {
    address = "irc.oftc.net";
    chatnet = "Oftc";
    port = "6667";
    autoconnect = "no";
  },
  {
    address = "127.0.0.1";
    chatnet = "znc_local_freenode";
    port = "6677";
    use_ssl = "yes";
    ssl_verify = "no";
    autoconnect = "no";
    password = "GIT-CENSORED";
  },
  {
    address = "127.0.0.2";
    chatnet = "znc_local_Quakenet";
    port = "6677";
    use_ssl = "yes";
    ssl_verify = "no";
    autoconnect = "no";
    password = "GIT-CENSORED";
  },
  {
    address = "127.0.0.3";
    chatnet = "znc_local_efnet";
    port = "6677";
    use_ssl = "yes";
    ssl_verify = "no";
    autoconnect = "no";
    password = "GIT-CENSORED";
  },
  {
    address = "127.0.0.4";
    chatnet = "znc_local_bitlbee";
    port = "6677";
    use_ssl = "yes";
    ssl_verify = "no";
    autoconnect = "no";
    password = "GIT-CENSORED";
  },
  {
    address = "compton.2r.se";
    chatnet = "znc_remote_freenode";
    port = "6677";
    use_ssl = "yes";
    ssl_verify = "no";
    autoconnect = "no";
    password = "GIT-CENSORED";
  },
  {
    address = "compton.2r.se";
    chatnet = "znc_remote_quakenet";
    port = "6677";
    use_ssl = "yes";
    ssl_verify = "no";
    autoconnect = "no";
    password = "GIT-CENSORED";
  },
  {
    address = "compton.2r.se";
    chatnet = "znc_remote_efnet";
    port = "6677";
    use_ssl = "yes";
    ssl_verify = "no";
    autoconnect = "no";
    password = "GIT-CENSORED";
  },
  {
    address = "compton.2r.se";
    chatnet = "znc_remote_bitlbee";
    port = "6677";
    use_ssl = "yes";
    ssl_verify = "no";
    autoconnect = "no";
    password = "GIT-CENSORED";
  }
);

chatnets = {
  Freenode = {
    type = "IRC";
    autosendcmd = "/^msg nickserv identify GIT-CENSORED";
    max_kicks = "4";
    max_modes = "4";
    max_msgs = "4";
    max_whois = "4";
  };
  QuakeNet = {
    type = "IRC";
    autosendcmd = "/^msg Q@CServe.quakenet.org auth erikw GIT-CENSORED;/mode erikw +C";
    max_kicks = "1";
    max_msgs = "3";
    max_whois = "30";
  };
  EFNet = { 
    type = "IRC";
    max_kicks = "4";
    max_msgs = "3";
    max_whois = "1";
  };
  BitlBee = {
    type = "IRC";
    autosendcmd = "/^msg &bitlbee identify GIT-CENSORED";
    #nick = "erikw";
    username = "bitlbee";
  };
  Undernet = {
    type = "IRC";
    max_kicks = "1";
    max_msgs = "3";
    max_whois = "30";
  };
  Mozilla = { type = "IRC"; };
  Oftc = { type = "IRC"; };
  znc_local_freenode = { type = "IRC"; username = "freenode"; };
  znc_local_quakenet = { type = "IRC"; username = "quakenet"; };
  znc_local_efnet = { type = "IRC"; username = "efnet"; };
  znc_local_bitlbee = { type = "IRC"; username = "bitlbee"; };
  znc_remote_freenode = { type = "IRC"; username = "erikw/freenode"; };
  znc_remote_quakenet = { type = "IRC"; username = "erikw/quakenet"; };
  znc_remote_efnet = { type = "IRC"; username = "erikw/efnet"; };
  znc_remote_bitlbee = { type = "IRC"; username = "bitlbee"; };
};

channels = (
  { name = "##kodapor"; chatnet = "freenode"; autojoin = "yes"; },
  { name = "#archlinux"; chatnet = "freenode"; autojoin = "no"; },
  { name = "#freebsd"; chatnet = "freenode"; autojoin = "no"; },
  { name = "##linux"; chatnet = "freenode"; autojoin = "no"; },
  { name = "#vim"; chatnet = "freenode"; autojoin = "no"; },
  { name = "#taskwarrior"; chatnet = "freenode"; autojoin = "no"; },
  { name = "#blausoffan"; chatnet = "efnet"; autojoin = "yes"; },
  { name = "#dwww"; chatnet = "efnet"; autojoin = "yes"; }
);

aliases = {
  J = "join";
  WJOIN = "join -window";
  WQUERY = "query -window";
  LEAVE = "part";
  BYE = "quit";
  EXIT = "quit";
  SIGNOFF = "quit";
  DESCRIBE = "action";
  DATE = "time";
  HOST = "userhost";
  LAST = "lastlog";
  SAY = "msg *";
  WI = "whois";
  WII = "whois $0 $0";
  WW = "whowas";
  W = "who";
  N = "names";
  M = "mark";
  T = "topic";
  C = "clear";
  CL = "clear";
  K = "kick";
  KB = "kickban";
  KN = "knockout";
  BANS = "ban";
  B = "ban";
  MUB = "unban *";
  UB = "unban";
  IG = "ignore";
  UNIG = "unignore";
  SB = "scrollback";
  UMODE = "mode $N";
  WC = "window close";
  WN = "window new hide";
  sv = "say Irssi $J ($V) - http://irssi.org/";
  GOTO = "sb goto";
  CHAT = "dcc chat";
  RUN = "SCRIPT LOAD";
  CALC = "exec - if which bc &>/dev/null\\; then echo '$*' | bc | awk '{print \"$*=\"$$1}'\\; else echo bc was not found\\; fi";
  SBAR = "STATUSBAR";
  INVITELIST = "mode $C +I";
  Q = "QUERY";
  QU = "QUOTE";
  "MANUAL-WINDOWS" = "set use_status_window off;set autocreate_windows off;set autocreate_query_level none;set autoclose_windows off;set reuse_unused_windows on;save";
  EXEMPTLIST = "mode $C +e";
  ATAG = "WINDOW SERVER";
  UNSET = "set -clear";
  RESET = "set -default";
  UPTIME = "eval exec - expr `date +%s` - \\$F | awk '{print \"Irssi uptime: \"int(\\\\\\$1/3600/24)\"d \"int(\\\\\\$1/3600%24)\"h \"int(\\\\\\$1/60%60)\"m \"int(\\\\\\$1%60)\"s\" }'";
  CS = "chansort";
  BL = "CTCP -proxy- IRSSIPROXY BACKLOG SEND";
  PL = "quote PLAYPRIVATELOG; quote ERASEPRIVATELOG; quote PLAYTRAFFICLOG last; quote ERASETRAFFICLOG";
};

statusbar = {
  # formats:
  # when using {templates}, the template is shown only if it's argument isn't
  # empty unless no argument is given. for example {sb} is printed always,
  # but {sb $T} is printed only if $T isn't empty.

  items = {
    # start/end text in statusbars
    barstart = "{sbstart}";
    barend = "{sbend}";

    topicbarstart = "{topicsbstart}";
    topicbarend = "{topicsbend}";

    # treated "normally", you could change the time/user name to whatever
    time = "{sb $Z}";
    user = "{sb {sbnickmode $cumode}$N{sbmode $usermode}{sbaway $A}}";

    # treated specially .. window is printed with non-empty windows,
    # window_empty is printed with empty windows
    window = "{sb $winref:$tag/$itemname{sbmode $M}}";
    window_empty = "{sb $winref{sbservertag $tag}}";
    prompt = "{prompt $[.15]itemname}";
    prompt_empty = "{prompt $winname}";
    topic = " $topic";
    topic_empty = " Irssi v$J - http://www.irssi.org";

    # all of these treated specially, they're only displayed when needed
    lag = "{sb Lag: %m$0-%n}";
    act = "{sb Act: $0-}";
    more = "%k%3-- more --%n";
    # Solarized
  };

  # there's two type of statusbars. root statusbars are either at the top
  # of the screen or at the bottom of the screen. window statusbars are at
  # the top/bottom of each split window in screen.
  default = {
    # the "default statusbar" to be displayed at the bottom of the window.
    # contains all the normal items.
    window = {
      disabled = "no";

      # window, root
      type = "window";
      # top, bottom
      placement = "bottom";
      # number
      position = "1";
      # active, inactive, always
      visible = "active";

      # list of items in statusbar in the display order
      items = {
        barstart = { priority = "100"; };
        user = { };
        window = { };
        window_empty = { };
        lag = { priority = "-1"; };
        act = { priority = "10"; };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
        vim_mode = { };
        vim_windows = { };
      };
    };

    # statusbar to use in inactive split windows
    window_inact = {
      type = "window";
      placement = "bottom";
      position = "1";
      visible = "inactive";
      items = {
        barstart = { priority = "100"; };
        window = { };
        window_empty = { };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
      };
    };

    # we treat input line as yet another statusbar :) It's possible to
    # add other items before or after the input line item.

    # topicbar
    topic = {
      type = "root";
      placement = "top";
      position = "1";
      visible = "always";
      items = {
        topicbarstart = { priority = "100"; };
        topic = { };
        topic_empty = { };
        topicbarend = { priority = "100"; alignment = "right"; };
      };
    };
    prompt = {
      items = {
        uberprompt = { priority = "-1"; };
        input = { priority = "10"; };
      };
      position = "100";
    };
    awl_0 = {
      items = {
        barstart = { priority = "100"; };
        awl_0 = { };
        barend = { priority = "100"; alignment = "right"; };
      };
    };
  };
};

settings = {
  core = {
    real_name = "Erik Westrup";
    user_name = "Erik Westrup";
    nick = "erikw";
    quit_message = "EOF";
    awaylog_file = "~/.log/irssi/away.log";
    recode_fallback = "utf-8";
    recode_out_default_charset = "utf-8";
    log_day_changed = "= --- Day changed %a %Y-%m-%b";
    cmdchars = "/";
    resolve_prefer_ipv6 = "yes";
    hostname = "";
    use_proxy = "no";
  };
  "irc/core" = {
    alternate_nick = "erikw1 erikw2";
    part_message = "(part)";
    skip_motd = "yes";
    join_auto_chans_on_invite = "no";
  };
  "fe-common/core" = {
    term_charset = "utf-8";
    autolog = "yes";
    autolog_path = "~/.log/irssi/$tag/${0}/${0}-%Y-%m-%d";
    hilight_nick_matches = "yes";
    names_max_width = "0";
    beep_when_away = "yes";
    emphasis_replace = "yes";
    reuse_unused_windows = "yes";
    emphasis_multiword = "yes";
    beep_when_window_active = "yes";
    beep_msg_level = "MSGS NOTICES DCC DCCMSGS HILIGHT";
    hilight_act_color = "%G";
    activity_hide_targets = "= ##linux #vim #archlinux &bitlbee -psyBNC";
    #theme = "colors/default";
    #hilight_color = "%B";
    theme = "colors/solarized-universal";
    hilight_color = "= %R";
    autoclose_query = "86400";
    show_quit_once = "yes";
  };
  "fe-text" = {
    actlist_sort = "refnum";
    colors = "yes";
    term_force_colors = "yes";
    paste_verify_line_count = "3";
    lag_min_show = "2sec";
    autostick_split_windows = "yes";
  };
  "irc/dcc" = {
    dcc_download_path = "~/.irssi/dcc";
    dcc_file_create_mode = "0";
  };
  "fe-common/irc" = { hide_netsplit_quits = "no"; };
  proxy = {
    irssiproxy_password = "GIT-CENSORED";
    irssiproxy_ports = "Freenode=6670 QuakeNet=6671 EFNet=6672 BitlBee=6673";
  };
  "perl/core/scripts" = {
    #awl_display_key = "$Q%K|%n$H$C$S";
    #awl_block = "-15";
    awl_block = "1";

    # For Solarized adv_windowlist.pl script
    awl_display_key_active = "%k%2[$Q=$N:$C]%n";
    awl_display_nokey_active = "%k%2[$N:$C]%n";
    awl_display_key = "[$Q:$H$C$S]";
    awl_display_nokey = "[$N:$H$C$S]";

    # For Solarized trackbar.pl script
    trackbar_style = "%B";

    #nicklist
    nicklist_width = "22";
    nicklist_automode = "fifo";

    awl_columns = "1";
    chansort_autosort = "yes";
    awl_prefer_name = "yes";
    tmux_away_active = "yes";
    nicklist_height = "48";
  };
};
logs = { };
ignores = (
  #{
  #level = "JOINS PARTS QUITS KICKS NICKS";
  #channels = ( );
  #network = "efnet, freenode, quakenet, bitlbee";
  #},
  {
    level = "JOINS PARTS QUITS MODES";
    channels = ( "&bitlbee", "#identi.ca_erikw", "#twitter_erikwestrup" );
    network = "bitlbee";
  },
  {
    level = "NOTICES SNOTES";
    channels = ( "##linux", "#vim", "#archlinux" );
    network = "freenode";
  },
  {
    mask = "*!archlinux-unregistered@chat.freenode.net";
    level = "ALL";
  }
);
hilights = (
  { text = "erikw"; color = "%M"; nick = "yes"; word = "yes"; },
  { text = "westrup"; color = "%M"; nick = "yes"; word = "yes"; }
);
keyboard = (
  { key = "meta-d"; id = "command"; data = "nicklist scroll +10"; },
  { key = "meta-u"; id = "command"; data = "nicklist scroll -10"; },
  { key = "meta-m"; id = "command"; data = "mark"; },
  { },
  { key = "meta-[M"; id = "command"; data = "mouse_xterm "; }
);
