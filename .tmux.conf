# Erik Westrup's tmux configuration.

# Modeline {
#	 vi: foldmarker={,} foldmethod=marker foldlevel=0: tabstop=8:
# }

# General {
	set-option -g status-keys vi 				# Use Vi bindings in tmux command prompt.
	set-option -g history-limit 131072			# Number of terminal lines per window to keep. (2^17)
	set-option -g buffer-limit 32				# Number of copy buffers.
	set-option -g bell-action any				# Any window can cause bell action.
	set-option -g visual-bell both				# Use both audioal and visual bell.
	#set-option -g lock-after-time 1800			# Lock session after X seconds.
	set-option -g display-time 1300				# Time (ms) the message bar is shown.
	set-option -g set-clipboard				# Try to set the X clipboard. Requires a modification in ~/.Xresources. Does not seems to work.
	set-option -g wrap-search off				# Don't wrap search in scroll buffer.
	set-window-option -g mouse on				# Enable mouse actions.
	set-window-option -g buffer-limit 32			# Number of copy buffers to save in choose-buffer.
	#set-option -g default-command "reattach-to-user-namespace -l ${SHELL}" # MACOS-CONFIG Enable open(1) in OSX. reattach-to-user-namespace not needed for tmux>=2.6.

	# Window {
		set-window-option -g mode-keys vi			# Use Vi bindings in copy and choice mode.
		set-window-option -g monitor-activity on		# Monitor windows for activity.
	# }
# }

# UI {
	# Different UI depending on if we're in X or not.
	#if '[ -n "$DISPLAY" ]' 'source-file ~/.tmux/x'
	#if '[ -z "$DISPLAY" ]' 'source-file ~/.tmux/xless'

	source ~/src/github.com/seebi/tmux-colors-solarized/tmuxcolors-dark.conf	# Load colorscheme.
	set-option -g set-titles off					# Try to set the title of the client terminal. Set to off or will hinder automatic-rename from working!
	set-option -g default-terminal "screen-256color"		# Use colors.
	#set-window-option -g window-status-current-bg red		# Highlight active window.
	set-option -g message-style "bg=default,fg=red,bold"		# Message bar style.
	set-option -g message-command-style "bg=default,fg=white,bold"	# Message bar style in command mode.
	set-option -g visual-activity on				# Notify visually events in monitor-activity enabled windows.
	set-option -g visual-bell off					# Don't disturb.
	set-option -g renumber-windows on				# Automatically renumber windows when closing a window.

	# Window {
		set-window-option -g clock-mode-style 24		# Use 24 hour clock.
		#set-window-option -g clock-mode-colour green		# Color of the clock.
		set-window-option -g allow-rename on			# Allow programs to rename titles.
		set-window-option -g automatic-rename on		# Rename titles automatically.
		#set-window-option -g window-status-format "#I:#W#F"	# Format for non active windows.
		# Format of the active window.
		#set-window-option -g window-status-current-format "[#I:#W#F]"
		#set-window-option -g window-status-current-format "#[fg=colour235, bg=colour27]#[fg=colour255, bg=colour27] #I  #W #[fg=colour27, bg=colour235]"
	# }

	set-option -g status on					# Always show the status bar.
	set-option -g status-position "bottom"			# Position of the status bar.
	set-option -g status-justify "centre"			# Justification of the window list.
	set-option -g status-interval 2				# Update interval in seconds for status bar.

	#  Left status {
		#set-option -g status-justify "left"			# Justification of the window list.
		#set-option -g status-left-length 90			# Maximum length of status.
		# String for the left status.
		#set-option -g status-left "#(~/dev/tmux-powerline/powerline.sh left)"
	#  }

	#  Right status {
		#set-option -g status-right-length 120			# Maximum length of status.
		# String for the right status.
		# load avg. alternative: awk \'{ print $1,$2,$3 }\' </proc/loadavg
		# %F == %Y-%m-%d ISO8601
		#set-option -g status-right "#(~/dev/tmux-powerline/powerline.sh right)"
	# }

	# Powerline {
		# Reference: https://powerline.readthedocs.io/en/latest/usage/other.html#tmux-statusline
		run-shell "powerline-daemon -q"				# Start the daemon.
		source "$POWERLINE_ROOT/bindings/tmux/powerline.conf"	# Source configuration.
		set-option -g status-left-length 150			# Maximum length of status.
		#set-option -g status-right-length 120			# Maximum length of status.
	# }
# }

# Bindings {
	# GNU Screen-like {
		unbind-key C-b						# Unbind default prefix key.
		set-option -g prefix C-a				# Seconday prefix key like GNU Screen.
		bind-key a send-prefix					# Send ^A.
		bind-key b send-prefix					# Send ^B.
		bind-key C-a last-window				# Toogle last window.

		#set-option -g prefix2 C-t				# Prefix that don't interfere with Emacs (so much).
		#bind-key t send-prefix -2				# Send ^T.
		#bind-key C-t last-window				# Toogle last window.

		unbind-key *
		bind-key * list-clients					# List connected clients.

		#unbind-key A
		#bind-key A command-prompt "rename-window %%"		# Rename window.

		unbind-key " "
		bind-key " " next-window				# Go to next window.
		unbind-key BSpace
		bind-key BSpace previous-window				# Go to previous window.
		unbind-key ^@
		bind-key ^@ next-layout					# Toggle default pane layouts.

		#unbind-key '"'
		#bind-key '"' choose-window				# Select window from list.
		#unbind-key '`'
		#bind-key '`' display-panes				# Enumerate panes.

		#unbind-key q
		bind-key Q confirm-before "kill-session"		# Kill active session.

		unbind-key k
		bind-key k confirm-before -p "kill-pane #P? (y/n)"  "kill-pane"			# Kill active pane.
		bind-key K confirm-before -p "kill-window #I? (y/n)"  "kill-window"		# Kill active window.

		#unbind-key l
		#bind-key l refresh-client				# Redraw screen.
		#bind-key C-l refresh-client				# Redraw screen.

		unbind-key X
		bind-key X lock-server
		set-option -g lock-command 'tput civis && read -s -n1'		# Blank screen as lock command.
		# Lock screen with password.
		#bind-key X set-option lock-command 'vlock' \; lock-client \; set-option lock-command 'tput civis && read -s -n1'

	# }

	# Vi-like {
		bind-key M-h select-pane -L		# Select pane left.
		bind-key M-j select-pane -D		# Select pane down.
		bind-key M-k select-pane -U		# Select pane up.
		bind-key M-l select-pane -R		# Select pane right.
		#bind-key M-a last-pane 		# Toggle last pane.

		# vi-edit mode and -t option removed in tmux2.4 :(.
		#bind-key -t vi-edit C-p history-up	# Previous command.
		#bind-key -t vi-edit C-n history-down	# Next command.
	# }

	# Copy mode {
		#bind-key -t vi-copy 'v' begin-selection		# Begin line selection in copy mode.
		#bind-key -t vi-copy 'C-v' rectangle-toggle	# Begin block selection in copy mode.
		#bind-key -t vi-copy 'y' copy-selection		# Yank selection in copy mode.
	# }

	# Create a new session.
	bind-key C-n command-prompt -p "New session:" "new-session -s '%%'"

	# Open a new window with CWD set-option in PS1.
	unbind-key c
	#bind-key c run-shell 'tmux new-window "cd \"$(tmux display -p "\$TMUXPWD_#D" | tr -d %)\"; exec $SHELL"'	# Worked for older tmuxes.
	#bind-key c run-shell 'tmux new-window "cd \"$(tmux show-environment $(echo "TMUXPWD_#D" | tr -d %) | sed -e "s/^.*=//")\"; exec $SHELL"'
	#bind-key c run-shell 'tmux new-window "cd \"$(tmux show-environment $(echo "TMUXPWD_#D" | tr -d %) | sed -e "s/^.*=//")\"; script --quiet --flush $HOME/.log/tmux/$(date +%Y-%m-%d-%H%M%S)_$$.log"'
	bind-key c new-window -c '#{pane_current_path}'		# Open new window with curret pane's path. Since v1.9a.
	bind-key M-c new-window -a -c '#{pane_current_path}'	# Open new window with curret pane's path, next to current one.
	bind-key C new-window					# Open new window to working directory.
	bind-key M-C new-window -a				# Open new window to working directory, next to current one.

	# Split horizontally.
	#bind-key - split-window -v		# "Horizontal" split.
	#bind-key - run-shell 'tmux split-window -v "cd \"$(tmux display -p "\$TMUXPWD_#D" | tr -d %)\"; exec $SHELL"'		# Worked for older tmuxes.
	#bind-key - run-shell 'tmux split-window -v "cd \"$(tmux show-environment $(echo "TMUXPWD_#D" | tr -d %) | sed -e "s/^.*=//")\"; exec $SHELL"'
	bind-key - split-window -v -c '#{pane_current_path}'

	# Split vertically.
	#bind-key | split-window -h		# "Vertical" split.
	#bind-key | run-shell 'tmux split-window -h "cd \"$(tmux display -p "\$TMUXPWD_#D" | tr -d %)\"; exec $SHELL"'		# Worked for older tmuxes.
	#bind-key | run-shell 'tmux split-window -h "cd \"$(tmux show-environment $(echo "TMUXPWD_#D" | tr -d %) | sed -e "s/^.*=//")\"; exec $SHELL"'
	bind-key | split-window -h -c '#{pane_current_path}'

	bind-key N select-pane -t:.+		# Cycle panes forwards.
	bind-key P select-pane -t:.-		# Cycle panes backwards.

	# Shortcut for moving window.
	#bind-key . command-prompt -p "move to window number: " "move-window -t '%%'"	# Move window to a new number. Default in newer tmux versions.
	# Shortcut for swapping windows.
	bind-key S command-prompt -p "swap with window number:" "swap-window -t '%%'"
	# Renumber windows in sequence.
	bind-key C-r move-window -r\; display-message "Windows reordered"
	# Move window left/right in list.
	bind-key -r S-Left swap-window -t -1
	bind-key -r S-Right swap-window -t +1

	# Open urlview for current buffer.
	bind-key O capture-pane \; save-buffer /tmp/${USER}_tmux-urlview \; split-window -v -l 10 "urlview /tmp/${USER}_tmux-urlview"

	bind-key @ command-prompt -p "create pane from window:" "join-pane -s ':%%'"	# Join window/pane to this window. The oposite of '<prefix>!'.
	bind-key R source-file ~/.tmux.conf\; display-message "sourced ~/.tmux.conf"	# Source tmux configuration file.
	bind-key C-t new-window  -n "tmux.conf" "vi ~/.tmux.conf"			# Edit tmux configuration file.
	bind-key M set-window-option monitor-activity				 	# Toggle activity monitoring for the current window.
	bind-key m command-prompt -p "man"  "split-window -h 'exec man %%'"		# Open man page in a split.

	# Toggle logging of pane to file.
	bind-key H pipe-pane -o "exec cat >>$HOME/.log/tmux/'#W-tmux.log'" \; display-message 'Toggled logging to $HOME/.log/tmux/#I_#P-tmux.log'

	# Copy tmux paste buffer to CLIPBOARD. Pipe xclip to /dev/null so it does not hang in input.
	bind-key C-c run "tmux show-buffer | xclip -i -selection clipboard >/dev/null 2>&1" \; display-message 'Copied tmux buffer to X clipboard.'	# Linux
	#bind-key C-c run "tmux show-buffer | reattach-to-user-namespace pbcopy >/dev/null 2>&1" \; display-message 'Copied tmux buffer to clipboard.'	# MACOS-CONFIG. reattach-to-user-namespace not needed for tmux>=2.6.
	#bind-key C-c run "tmux show-buffer | pbcopy >/dev/null 2>&1" \; display-message 'Copied tmux buffer to clipboard.'	# MACOS-CONFIG
	# Copy CLIPBOARD to tmux paste buffer and paste tmux paste buffer.
	bind-key C-v run "tmux set-buffer -- \"$(xclip -o -selection clipboard)\"; tmux paste-buffer" 		# Linux
	#bind-key C-v run "tmux set-buffer -- \"$(reattach-to-user-namespace pbpaste)\"; tmux paste-buffer"	# MACOS-CONFIG. reattach-to-user-namespace not needed for tmux>=2.6.
	#bind-key C-v run "tmux set-buffer -- \"$(pbpaste)\"; tmux paste-buffer"	# MACOS-CONFIG


	# Zoom in pane by creating a new window and swap them. NOTE tmux v1.8 has a zoon feature included bound to <prefix>+z
	#bind z new-window -d -n tmux-zoom 'clear && echo TMUX ZOOM && read' \; swap-pane -s tmux-zoom.0 \; select-window -t tmux-zoom
	# Zoom out by swapping the pane back and kill the temporary window.
	#bind Z last-window \; swap-pane -s tmux-zoom.0 \; kill-window -t tmux-zoom

	# Kill session and switch to last used session. Source: http://unix.stackexchange.com/questions/58588/kill-a-tmux-session-and-select-another-tmux-session
	bind-key X confirm-before -p "Kill #S? (y/n)" "run-shell 'tmux switch-client -n \\\; kill-session -t \"\$(tmux display-message -p \"#S\")\"'"
# }

# Tmux Plugin Manager {
	# List of plugins
	# Supports `github_username/repo` or full git repo URLs
	set -g @tpm_plugins '			\
		tmux-plugins/tpm		\
		tmux-plugins/tmux-open		\
		tmux-plugins/tmux-sidebar	\
		tmux-plugins/tmux-resurrect	\
	'

	# Disabled plugins
		#tmux-plugins/tmux-urlview	\
		#tmux-plugins/tmux-sessionist	\
		#tmux-plugins/tmux-copycat	\

	# Initializes TMUX plugin manager.
	# Keep this line at the very bottom of tmux.conf.
	run-shell '~/.tmux/plugins/tpm/tpm'
# }
