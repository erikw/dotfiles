[user]
	name = Erik Westrup
	;email = user@host.tld  ; Set in ~/.gitconfig.local
	signingkey = D5EFDF013574AE9BE8343C327C16B1148E432F36
	editor = nvim	# Will be overriden by $EDITOR
[github]
	user = erikw
[color]
	diff = auto
	status = auto
	branch = auto
	ui = auto
	page = true
[core]
[help]
	;browser = firefox -new-tab
	browser = lynx
	autoCorrect = immediate  # Prompt before correcting misspelled command.
[svn]
	rmdir = true
[alias]
	br = branch
	ci = commit
	cia = commit --amend
	cicc = !"git commit --quiet -m \"Collected changes\" && git --no-pager show -s --format='format:Committed: %s%n'"
	cl = clone
	co = checkout
	committers = shortlog -s -n --all
	cp = cherry-pick
	desc0= describe --abbrev=0
	desc= describe
	desct0= describe --tags --abbrev=0  ; Include all tags, not only annotated ones.
	desct= describe --tags
	di = diff
	dic = diff --cached
	diffc = diff --cached
	ft = fetch
	fuckit = !"git add .; git commit -m \"$(curl -s http://whatthecommit.com/index.txt)\""
	gvimerge = mergetool -t gvimdiff
	h = help
	l = log
	log1 = log --pretty=oneline
	logs = log --stat
	logself = !sh -c 'git log --author=$(git config user.email)'
	lol = log --graph --decorate --pretty=oneline --abbrev-commit
	lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
	ls = ls-files
	mb = merge-base
	originurl = config --get remote.origin.url
	pu = push
	pushw = !"git push && netlify watch"
	pushall = !git remote | xargs -L1 git push --all   # Ref: https://stackoverflow.com/a/18674313
	rb = rebase
	re = restore
	st = status
	stashshow0 = stash show -p stash@{0}
	stat = status
	sub = submodule
	svn-status = diff --name-status remotes/git-svn
	sw = switch
	vimerge = mergetool -t vimdiff

	# commit-status: generate a commit with message from git-status (staged changes).
	# Source: https://gist.github.com/erikw/654386d35ecfdb0354cd2b71763f19ae
	# Explanation:
	# - Get only staged changes
	# - Ignore changes in working area (2nd letter, the Y in XY as explained in $(git help status))
	# - + split label and file path to separate lines so we can process the labels separately
	# - Keep only the first label using awk
	# - Add newline before each label section so we later can truncate \n to put everything on one line
	# - Make labels human readable e.g. M -> Modified
	# - Put everything on one line and trim leading & trailing whitespaces
	commit-status = !" \
	        TMPFILE=$(mktemp /tmp/git-commit-status-message.XXX); \
		git status --porcelain \
		  | grep '^[MARCDT]' \
		  | sort \
		  | sed -re 's/^([[:upper:]])[[:upper:]]?[[:space:]]+/\\1:\\n/' \
		  | awk '!x[$0]++' \
		  | sed -re 's/^([[:upper:]]:)$/\\n\\1/' \
		  | sed -re 's/^M:$/Modified: /' \
		  | sed -re 's/^A:$/Added: /' \
		  | sed -re 's/^R:$/Renamed: /' \
		  | sed -re 's/^C:$/Copied: /' \
		  | sed -re 's/^D:$/Deleted: /' \
		  | sed -re 's/^T:$/File Type Changed: /' \
		  | tr '\n' ' ' | xargs \
		  > $TMPFILE; \
		git commit -F $TMPFILE; \
		rm -f $TMPFILE \
		"
	cis = commit-status

	# Pre-pend [skip ci] to HEAD's commit message. Reference: https://gist.github.com/jpalmieri/cb6271004127633a133e9606ddba58b1
        skip-ci = !"git reset && COMMIT_MSG=$(git show -s --format=format:%B) && git commit --allow-empty --amend -m \"[skip ci] $COMMIT_MSG\" && git --no-pager show -s --format='format:New commit message subject: %s%n'"
[credential]
	helper = cache
[pull]
	rebase = true	; Only rebase when pulling, no mrege.
	ff = only	; Allow only fast-forward (no merge commit) rebase when pulling with rebase.
[push]
	default = upstream
[merge]
	log = true
[init]
	defaultBranch = main	; Until this is default.
[pager]
	branch = false ; Don't use pager for git-branch.
[diff "odf"]
	textconv = odt2txt
[http]
	postBuffer = 524288000	; Increase post byte size. Could also set this per project with $(git config http.postBuffer 524288000). Reference: https://stackoverflow.com/a/3605544/265508
[gerrit]
	createChangeId = true

; https://github.com/motemen/ghq
[ghq]
	root = ~/src

; Companies using proxy needs a proto rewrite (set env https?_proxy too).
;[url "https://"]
	;insteadOf = git://

[include]
  path = ~/.config/git/config-local ; set e.g. user.email

; Conditional config
; Available for git >=v2.13
[includeIf "gitdir:~/work/"]
	path = ~/.config/git/config-work
