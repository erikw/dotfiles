# Common shelll settings (used by at least my .bashrc and .zshrc)
# Find out which are good sandboxing candidates with profileing like in: https://kev.inburke.com/kevin/profiling-zsh-startup-time/
# Modeline {
#	vi: foldmarker={,} filetype=sh foldmethod=marker foldlevel=0 tabstop=8 shiftwidth=8
# }

# Env Bootstrap & XDG {
	# Set XDG envvars to default values, so that scripts can refer to them (like in ~/.config/nvim/syntax/)
	# Reference: https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html
	# Don't use these direclty, but substitute for default value if empty:
	# - ${XDG_CONFIG_HOME:-$HOME/.config}
	# - ${XDG_DATA_HOME:-$HOME/.local/share}
	# - ${XDG_STATE_HOME:-$HOME/.local/state}
	# - ${XDG_CACHE_HOME:-$HOME/.cache}
	export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
	export XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"
	export XDG_STATE_HOME="${XDG_STATE_HOME:-$HOME/.local/state}"
	export XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"
	export XDG_RUNTIME_DIR="${XDG_RUNTIME_DIR:-$HOME/.local/run}"  # Need to be set for yarn(1).

	# Make programs respect XDG.
	export INPUTRC=$XDG_CONFIG_HOME/readline/inputrc
	export KDEHOME=$XDG_CONFIG_HOME/kde
	export MPLAYER_HOME=$XDG_CONFIG_HOME/mplayer
	export NOTMUCH_CONFIG=$XDG_CONFIG_HOME/notmuch/notmuchrc
	export OCTAVE_SITE_INITFILE=$XDG_CONFIG_HOME/octave/octaverc
	export OCTAVE_HISTFILE=$XDG_CACHE_HOME/octave-hsts
	export SCREENRC=$XDG_CONFIG_HOME/screen/screenrc
	export XCOMPOSECACHE=$XDG_CACHE_HOME/X11/XCompose
	export XCOMPOSEFILE=$XDG_CONFIG_HOME/X11/XCompose
	export CGDB_DIR=$XDG_CONFIG_HOME/cgdb
	export GRADLE_USER_HOME=$XDG_DATA_HOME/gradle
	export BUNDLE_USER_CONFIG=$XDG_CONFIG_HOME/bundle/config
	export BUNDLE_USER_CACHE=$XDG_CACHE_HOME/bundle
	export BUNDLE_USER_PLUGIN=$XDG_DATA_HOME/bundle
	export GRIPHOME=$XDG_CONFIG_HOME/grip
	export GTK2_RC_FILES="$XDG_CONFIG_HOME"/gtk-2.0/gtkrc
	export SQLITE_HISTORY=$XDG_DATA_HOME/sqlite_history
	export XINITRC=$XDG_CONFIG_HOME/X11/xinitrc
	#export XSERVERRC=$XDG_CONFIG_HOME/X11/xserverrc
	export ACKRC=$XDG_CONFIG_HOME/ack/ackrc	# Project local .ackrc is still possible.
	export WGETRC=$XDG_CONFIG_HOME/wget/wgetrc
	export GDBHISTFILE=$XDG_DATA_HOME/gdb/history
	export SOLARGRAPH_CACHE=$XDG_CACHE_HOME/solargraph
	export TRAVIS_CONFIG_PATH=$XDG_CONFIG_HOME/travis
	export RIPGREP_CONFIG_PATH=$XDG_CONFIG_HOME/ripgrep/config
	export FZF_MARKS_FILE=$XDG_CONFIG_HOME/fzf-marks/marks
	export GOPATH="$XDG_DATA_HOME/go"

	# asdf; Not yet fully compliant: https://github.com/asdf-vm/asdf/issues/687
	export ASDF_CONFIG_FILE=${XDG_CONFIG_HOME}/asdf/asdfrc
	export ASDF_DATA_DIR=${XDG_DATA_HOME}/asdf
	# asdf plugins:
	export ASDF_PYTHON_DEFAULT_PACKAGES_FILE=${XDG_CONFIG_HOME}/pip/asdf-default-python-packages.txt
	export ASDF_NPM_DEFAULT_PACKAGES_FILE=${XDG_CONFIG_HOME}/npm/asdf-default-npm-packages.txt
	export ASDF_GEM_DEFAULT_PACKAGES_FILE=${XDG_CONFIG_HOME}/gem/asdf-default-gems.txt

	# Gems
	export GEM_SPEC_CACHE=$XDG_CACHE_HOME/gem
	export GEM_HOME=$XDG_DATA_HOME/gem
	export PATH="$GEM_HOME/bin:$PATH"

	# NPM
	export NPM_CONFIG_USERCONFIG=$XDG_CONFIG_HOME/npm/npmrc
	export PATH="$XDG_DATA_HOME/npm/bin:$PATH"

	# Load utility functions & aliases.
	source "${XDG_CONFIG_HOME:-$HOME/.config}/shell/functions"
	sourceifexists "${XDG_CONFIG_HOME:-$HOME/.config}/shell/aliases"
# }

# Paths {
	# Make the path available in subshells. Export is only needed once.
	export PATH

	# Include system binaries.
	PATH="/usr/local/bin:/usr/local/sbin:/sbin:/usr/sbin:$PATH"
	# Include binaries in home directory.
	PATH="$HOME/bin:$PATH"

	# E.g. poetry installs here.
	test -d $HOME/.local/bin && PATH="$HOME/.local/bin:$PATH"

	# Homebrew installation path prefix - do this once, instead of slowing down shell everywhere.
	brew_bin=
	if [ -e /opt/homebrew/bin/brew ]; then  # Apple Silicon macs
		brew_bin=/opt/homebrew/bin/brew
	elif [ -e /usr/local/bin/brew ]; then  # Intel Macs
		brew_bin=/usr/local/bin/brew
	elif [ -e /home/linuxbrew/.linuxbrew/bin/brew ]; then  # Linux
		brew_bin=/home/linuxbrew/.linuxbrew/bin/brew
	fi
	if [ -n "$brew_bin" ]; then
		eval "$(${brew_bin} shellenv)"
	fi
	unset brew_bin
# }

# Environment {
	# Use THE text editor
	if program_is_in_path nvim; then
		export EDITOR=nvim VISUAL=nvim CSHEDIT=nvim
	elif program_is_in_path vim; then
		export EDITOR=vim VISUAL=vim CSHEDIT=vim
	fi

	# and the only pager.
	export PAGER=less

	# Current DE in use.
	if shell_is_macos; then
		export DESKTYPE=macos
	else
		# LINUX-CONFIG
		# FREEBSD-CONFIG
		export DESKTYPE=dwm
	fi

	# Locale
	export LANG=EN_US

	# Let others know what underlying terminal emulator is used. This is needed since $TERM does not always represent the real terminal e.g. in tmux when you want colors.
	shell_is_linux && program_is_in_path urxvt && export TERMEMU=urxvt

	# Brew bundler
	if program_is_in_path brew; then
		# Not using the Brewfile.lock.json feature.
		export HOMEBREW_BUNDLE_NO_LOCK=1
	fi

	# A better compiler for C langs.
	# Unfortunately still quite some problems e.g. with compiling native extension of $(gem install byebuy)
	#if program_is_in_path clang; then
		#export CC=clang
		#export CXX=clang++
	#fi

	# Personal log folder used by some program configurations.
	test -d ${XDG_STATE_HOME:-$HOME/.local/state}/tmux || mkdir -p ${XDG_STATE_HOME:-$HOME/.local/state}/tmux
	#test -d ${XDG_STATE_HOME:-$HOME/.local/state}/irssi || mkdir -p ${XDG_STATE_HOME:-$HOME/.local/state}/irssi

	# Enable sandboxing a.k.a. lazy loading of shell initialization for some programs.
	# Not possible with dfm to install to .local/share as 2 levels of recurse in dfminstall does not work.
	# See https://github.com/justone/dfm/issues/39
	sourceifexists "$HOME/.repos/sandboxd/sandboxd"

	# Needed for gnupg's gpg(1) to work, thus for git commit signing.
	program_is_in_path gnupg && export GPG_TTY=$(tty)

	# Nice to have when fetching scanned documents
	export SCANNED=$HOME/media/images/scanned/
	# Ditto screenshots
	export SCREENSHOTS=$HOME/media/images/screenshots/

	# Disable macos shell restore feature (/etc/bashrc_Apple_Terminal) that creates e.g. ~/.zsh_session
	shell_is_macos && export SHELL_SESSIONS_DISABLE=1

	# Speed up dfm by telling it where the source is
	test -d "$HOME/src/github.com/erikw/dotfiles" && export DFM_REPO="$HOME/src/github.com/erikw/dotfiles"
# }

# UI {
	# Solarized ls colors.
	dircolorsdb=$HOME/.repos/dircolors-solarized/dircolors.256dark
	if ! [ -f "$dircolorsdb" ]; then
		dircolorsdb=${XDG_CONFIG_HOME:-$HOME/.config}/shell/dircolors
	fi
	if program_is_in_path dircolors; then
		eval "$(dircolors -b $dircolorsdb)"
	elif shell_is_macos && program_is_in_path gdircolors; then
		eval "$(gdircolors -b $dircolorsdb)"
	fi
	unset dircolorsdb

	# Colorize ls(1) on BSD/Mac systems.
	shell_is_bsd && export CLICOLOR=1

	 # Use colorful terminal.
	 case "$TERM" in
		xterm*)		export TERM=xterm-256color ;;
		screen*)	export TERM=screen-256color ;;
		rxvt*)		export TERM=rxvt-unicode-256color ;;
	 esac


	# Colored man pages. Reference: https://wiki.archlinux.org/index.php/Man_Page#Colored_man_pages
	# But only if we don't use batman (alias set in ~/.config/shell/aliases).
	if ! program_is_in_path batman; then
		function man() {
		env \
			LESS_TERMCAP_mb=$(printf "\e[1;31m") \
			LESS_TERMCAP_md=$(printf "\e[1;31m") \
			LESS_TERMCAP_me=$(printf "\e[0m") \
			LESS_TERMCAP_se=$(printf "\e[0m") \
			LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
			LESS_TERMCAP_ue=$(printf "\e[0m") \
			LESS_TERMCAP_us=$(printf "\e[1;32m") \
				man "$@"
	}
	fi
# }

# Programs {
#  Go {
	if [ -d "$GOPATH/bin" ]; then
		PATH="$GOPATH/bin::$PATH"
	fi
	#if [ -d "$HOME/src/github.com/golang/go" ]; then
	#        export GOROOT="$HOME/src/golang/go"
	#        PATH="$GOROOT/bin:$GOROOT/pkg/tool/linux_amd64:$PATH"
	#fi
# }

# Java {
	#if [ -e /usr/libexec/java_home ] ; then
		#export JAVA_HOME=$(/usr/libexec/java_home 2>/dev/null)
		#test $? -eq 0 || unset JAVA_HOME
	#fi

	# Add ANSI color output to ant.
	#if program_is_in_path ant; then
		#export ANT_ARGS='-logger org.apache.tools.ant.listener.AnsiColorLogger'
	#fi

	# Set $JAVA_HOME from asdf. Reference: https://github.com/halcyon/asdf-java
	sourceifexists "${XDG_DATA_HOME:-$HOME/.local/share}/asdf/plugins/java/set-java-home.$SHELL_NAME"

# }

# less {
	# Syntax highlighting for less with src-highlight.
	# Normal highlight.
	#if type src-hilite-lesspipe.sh  >/dev/null 2>&1; then
		#export LESSOPEN="| src-hilite-lesspipe.sh %s"
	#fi

	if program_is_in_path source-highlight; then
		export LESSOPEN="| $(which src-hilite-lesspipe.sh) %s"
		# Solarized version, as the normal version does not work (hidden text) when solarized terminal background is used.
		# https://github.com/jrunning/source-highlight-solarized
		#export LESSOPEN="| source-highlight --failsafe -f esc-solarized --style-file=esc-solarized.style -i %s -o STDOUT"
	fi

	# --RAW-CONTROL-CHARS"	- Display colors.
	# --ignore-case"	- Case insensitive search. However using capital letter(s) will enable case sensitive search.
	# --status-column"	- Status column with number of lines etc.
	#  --LINE-NUMBERS"	- Show line numbers.
	export LESS="--RAW-CONTROL-CHARS --ignore-case --status-column"
# }

# Ruby {
	# ruby-build: recommended build env.
	# Reference: https://github.com/rbenv/ruby-build/wiki#suggested-build-environment
	#export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@1.1)"
	if program_is_in_path ruby-build || program_is_in_path asdf ; then
		# For Ruby versions 2.xâ€“3.0
		#export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$HOMEBREW_PREFIX/opt/openssl@1.1"
		# For Ruby versions >3.0
		export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$HOMEBREW_PREFIX/opt/openssl@3"
	fi
# }

# Python {
	# Python pip binary installation directory (pip3 install --user)
	if shell_is_macos; then
		PATH="$HOME/Library/Python/3.9/bin:$PATH"
	fi

	# Virtualenvwrapper, installed with pip. NOTE Is sandboxed
	#shell_is_macos && virtenv_path=/usr/local/bin/virtualenvwrapper.sh || virtenv_path=/usr/bin/virtualenvwrapper_lazy.sh
	#if [ -e $virtenv_path ]; then
	#	source $virtenv_path
	#	export WORKON_HOME=$HOME/.virtualenvs
	#	export PROJECT_HOME=$HOME/dev
	#fi
# }

	# iTerm2 shell integration. Reference: https://www.iterm2.com/documentation-shell-integration.html
	#sourceifexists $HOME/.iterm2_shell_integration.$SHELL_NAME

	# Start SSH agent, unless this is an SSH session already
	# Ref: https://stackoverflow.com/a/18915067
	if [ -z "$SSH_CLIENT" ]; then
		SSH_ENV="$HOME/.ssh/env"

		function start_agent {
			#echo -n "Initialising new SSH agent... "
			/usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
			#echo succeeded
			chmod 600 "${SSH_ENV}"
			. "${SSH_ENV}" > /dev/null
			/usr/bin/ssh-add;
		}

		# Source SSH settings, if applicable
		if [ -f "${SSH_ENV}" ]; then
			. "${SSH_ENV}" > /dev/null
			#ps ${SSH_AGENT_PID} doesn't work under cywgin
			ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
			start_agent;
		    }
		else
			start_agent;
		fi
	fi

	# Add tab completion to daemonize.
	if program_is_in_path daemonize; then
		$completion_func -cf daemonize
	fi

	# Tab complete for viw.
	if program_is_in_path viw; then
		 $completion_func -cf viw
	fi

	# Android SDK
	#if [ -d "$HOME/src/android-sdk-linux/" ]; then
		#PATH="$HOME/src/android-sdk-linux/tools/:$HOME/src/android-sdk-linux/platform-tools/:$PATH"
	#fi

	# Perl
	# cpan(1): avoid interactive configuration on first launch.
	export PERL_MM_USE_DEFAULT=1
	# Custom locallib installation path for modules
	# Ref: https://stackoverflow.com/a/41541273/265508
	export PERL_BASE="$XDG_DATA_HOME/perl5"
	export PERL_MM_OPT="INSTALL_BASE=$PERL_BASE"
	export PERL_MB_OPT="--install_base $PERL_BASE"
	export PERL5LIB="$PERL_BASE/lib/perl5"
	export PATH="$PERL_BASE/bin:$PATH"
	export MANPATH="$PERL_BASE/man:$MANPATH"

	# Load custom keymap
	# NOTE allow me or %wheeler to issue loadkeys with no password.
	#if shell_is_linux && [ -f "${XDG_CONFIG_HOME:-$HOME/.config}/loadkeys/keymap" ]; then
		#sudo loadkeys -q ${XDG_CONFIG_HOME:-$HOME/.config}/loadkeys/keymap &>/dev/null
	#fi

	# Must be at the end of shell init file. but here should do...
	if program_is_in_path sdk; then
		export SDKMAN_DIR="$HOME/.sdkman"
		[[ -s "$SDKMAN_DIR/bin/sdkman-init.sh" ]] && source "$SDKMAN_DIR/bin/sdkman-init.sh"
	fi

	# Add MacTex binaries (macos) to PATH.
	# Reference: http://rkrug.github.io/LMS-test/downloads/UpdatingForElCapitan.pdf
	test -e /Library/TeX/texbin && PATH="/Library/TeX/texbin:$PATH"

	# ghq
	# https://github.com/motemen/ghq
	# Set envvar to my github clones directory, use same base path as
	# $(git config --global ghq.root)
	export GITHUB=$HOME/src/github.com/erikw

	# Travis cli client. https://github.com/travis-ci/travis.rb
	sourceifexists $HOME/.travis/travis.sh

	# broot - https://dystroy.org/broot/install-br/
	sourceifexists $HOME/.config/broot/launcher/bash/br

	# fzf https://github.com/junegunn/fzf#using-homebrew
	if program_is_in_path fzf; then
		source ${XDG_CONFIG_HOME:-$HOME/.config}/fzf/fzf.${SHELL_NAME}
		# Default cli options. See fzf(1)
		export FZF_COMPLETION_OPTS='--multi'

		# Find dot files as well. Reference: https://github.com/junegunn/fzf/issues/634
		if program_is_in_path fd; then
			#export FZF_DEFAULT_COMMAND="rg --hidden --files --glob '!{.git,node_modules}/'"
			#export FZF_DEFAULT_COMMAND='fd --type file --hidden --follow --exclude node_modules'
			export FZF_DEFAULT_COMMAND='fd --type file --hidden --follow'
		else
			export FZF_DEFAULT_COMMAND='find . -type d \( -path './.git' -o -path './node_modules'  \) -prune -o -print'
		fi
		export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

		# To exclude path:
		#export FZF_DEFAULT_COMMAND="$FZF_DEFAULT_COMMAND --exclude 'vcr_cassettes/'"
		export FZF_DEFAULT_COMMAND="$FZF_DEFAULT_COMMAND --exclude '.git/'"
	fi

	# Homebrew sqlite to shadow old version shipped with macOS.
	if [ -d "$HOMEBREW_PREFIX/opt/sqlite/bin" ]; then
		PATH="$HOMEBREW_PREFIX/opt/sqlite/bin:$PATH"
	fi

	# Homebrew curl
	if [ -d "$HOMEBREW_PREFIX/opt/curl/bin" ]; then
		PATH="$HOMEBREW_PREFIX/opt/curl/bin:$PATH"
	fi

	# asdf
	if program_is_in_path asdf; then
		if [ -n "$HOMEBREW_PREFIX" ]; then
			source "$HOMEBREW_PREFIX/opt/asdf/libexec/asdf.sh"
			# Hide asdf from brew, otherwise brew-doctor will complain on python-config files in PATH.
			# Reference: https://github.com/pyenv/pyenv/issues/106#issuecomment-94921352
			shell_is_macos && alias brew="env PATH=${PATH//$ASDF_DATA_DIR\/shims:/} brew"
		elif shell_is_linux; then
			source /opt/asdf-vm/asdf.sh
		fi
	fi

	# fzf-marks: https://github.com/urbainvaes/fzf-marks
	if [ -d $HOME/.repos/fzf-marks ]; then
		source $HOME/.repos/fzf-marks/fzf-marks.plugin.$SHELL_NAME
		# --exact --select-1: jump to exact match directly if only match.
		# --nth=1 --delimiter=' : ': only search the bookmark names, not values.
		FZF_MARKS_COMMAND="$FZF_MARKS_COMMAND --exact --select-1 --nth=1 --delimiter=' : '"

		# Be consistent with default fzf behaviour. ctrl-d should close selection window, not delete things.
		FZF_MARKS_DELETE=ctrl-r
	fi

	# direnv: https://direnv.net/
	if program_is_in_path direnv; then
		eval "$(direnv hook $SHELL_NAME)"
	fi
# }
