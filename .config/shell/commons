# Common shelll settings (used by at least my .bashrc and .zshrc)
# Find out which are good sandboxing candidates with profileing like in: https://kev.inburke.com/kevin/profiling-zsh-startup-time/
# Modeline {
#	vi: foldmarker={,} filetype=sh foldmethod=marker foldlevel=0: tabstop=8 shiftwidth=8:
# }

# Env Bootstrap & XDG {
	# Set XDG envvars to default values, so that scripts can refer to them (like in ~/.config/nvim/syntax/)
	# Reference: https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html
	# Don't use these direclty, but substitute for default value if empty:
	# - ${XDG_CONFIG_HOME:-$HOME/.config}
	# - ${XDG_DATA_HOME:-$HOME/.local/share}
	# - ${XDG_STATE_HOME:-$HOME/.local/state}
	# - ${XDG_CACHE_HOME:-$HOME/.cache}
	export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
	export XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"
	export XDG_STATE_HOME="${XDG_STATE_HOME:-$HOME/.local/state}"
	export XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"
	export XDG_RUNTIME_DIR="${XDG_RUNTIME_DIR:-$HOME/.local/run}"  # Need to be set for yarn(1).

	# On Linux, should be done by xdg-user-dirs
	# NOTE disabled as I'm not really using this.
	#if shell_is_macos && [ -e $XDG_CONFIG_HOME/user-dirs.dirs ] ; then
		##while read -r line; do
			##eval "export $line"
		##done <  $XDG_CONFIG_HOME/user-dirs.dirs
		#eval "export $(paste -s -d' ' $XDG_CONFIG_HOME/user-dirs.dirs)"
	#fi

	# Make programs respect XDG
	export INPUTRC=$XDG_CONFIG_HOME/readline/inputrc
	export KDEHOME=$XDG_CONFIG_HOME/kde
	export MPLAYER_HOME=$XDG_CONFIG_HOME/mplayer
	export NOTMUCH_CONFIG=$XDG_CONFIG_HOME/notmuch/notmuchrc
	export OCTAVE_SITE_INITFILE=$XDG_CONFIG_HOME/octave/octaverc
	export OCTAVE_HISTFILE=$XDG_CACHE_HOME/octave-hsts
	export SCREENRC=$XDG_CONFIG_HOME/screen/screenrc
	export XCOMPOSECACHE=$XDG_CACHE_HOME/X11/XCompose
	export XCOMPOSEFILE=$XDG_CONFIG_HOME/X11/XCompose
	export CGDB_DIR=$XDG_CONFIG_HOME/cgdb
	export GRADLE_USER_HOME=$XDG_DATA_HOME/gradle
	export BUNDLE_USER_CONFIG=$XDG_CONFIG_HOME/bundle/config
	export BUNDLE_USER_CACHE=$XDG_CACHE_HOME/bundle
	export BUNDLE_USER_PLUGIN=$XDG_DATA_HOME/bundle
	export GRIPHOME=$XDG_CONFIG_HOME/grip
	export GTK2_RC_FILES="$XDG_CONFIG_HOME"/gtk-2.0/gtkrc
	export SQLITE_HISTORY=$XDG_DATA_HOME/sqlite_history
	export XINITRC=$XDG_CONFIG_HOME/X11/xinitrc
	#export XSERVERRC=$XDG_CONFIG_HOME/X11/xserverrc
	export ACKRC=$XDG_CONFIG_HOME/ack/ackrc	# Project local .ackrc is still possible.
	export WGETRC=$XDG_CONFIG_HOME/wget/wgetrc
	export GDBHISTFILE=$XDG_DATA_HOME/gdb/history
	export SOLARGRAPH_CACHE=$XDG_CACHE_HOME/solargraph
	export TRAVIS_CONFIG_PATH=$XDG_CONFIG_HOME/travis
	export RIPGREP_CONFIG_PATH=$XDG_CONFIG_HOME/ripgrep/config

	export GEM_SPEC_CACHE=$XDG_CACHE_HOME/gem
	export GEM_HOME=$XDG_DATA_HOME/gem
	export PATH="$GEM_HOME/bin:$PATH"

	export NPM_CONFIG_USERCONFIG=$XDG_CONFIG_HOME/npm/npmrc
	export PATH="$XDG_DATA_HOME/npm/bin:$PATH"

	# Load utility functions.
	source ${XDG_CONFIG_HOME:-$HOME/.config}/shell/functions
# }

# Paths {
	# Make the path available in subshells. Export is only needed once.
	export PATH

	# Include system binaries.
	PATH="/usr/local/bin:/usr/local/sbin:/sbin:/usr/sbin:$PATH"
	# Include binaries in home directory.
	PATH="$HOME/bin:$PATH"

	# E.g. poetry installs here.
	test -d $HOME/.local/bin && export PATH="$HOME/.local/bin:$PATH"

	# Set common bin paths.
	#PATH=${PATH}:$(find ~/bin -maxdepth 2 -type d | tr '\n' ':' | sed 's/:$//')
	#common_bin_dirs=(mutt mkdirs)
	#for common_dir in "${common_bin_dirs[@]}"; do
		#if [ -d "$HOME/bin/$common_dir" ]; then
			#PATH="$PATH:$HOME/bin/$common_dir"
		#fi
	#done

	# Convenient cdpaths.
	#CDPATH=$HOME
# }

# Environment {
	# Use THE text editor.
	if program_is_in_path nvim; then
		export EDITOR=nvim VISUAL=nvim CSHEDIT=nvim
	elif program_is_in_path vim; then
		export EDITOR=vim VISUAL=vim CSHEDIT=vim
	fi

	# and the only pager.
	export PAGER=less

	# Current DE in use.
	if shell_is_macos; then
		export DESKTYPE=macos
	else
		# LINUX-CONFIG
		# FREEBSD-CONFIG
		export DESKTYPE=dwm
	fi

	# GNU coreutils etc. {
	# Add homebrew coreutils with default names to PATH, and also to MANPATH.
	# Instructions comes from the output of $(brew install coreutils).
	# NOTE this can have unexpected side effects. $(brew doctor): Warning: Putting non-prefixed coreutils in your path can cause gmp builds to fail. Better not do this!
	# findutils seems to break numpy e.g.
	#if shell_is_macos; then
		#gnu_packages=(gnu-indent findutils gnu-sed gnu-tar grep)
		#for gnu_package in "${gnu_packages[@]}"; do
			#gpathbase=/usr/local/opt/${gnu_package}/libexec
			#if [ -d $gpathbase/gnubin ]; then
				#PATH="$gpathbase/gnubin:$PATH"
				#MANPATH="$gpathbase/gnuman:$MANPATH"
			#fi
		#done
		#unset gnu_packages gnu_package gpathbase
		## However brew should not run with gnu utils in PATH as this can mess up builds $(brew doctor complains)
		## NOPE this is a bad idea; when 'brew' is used with aliases, this alieas is expanded e.g. $(psg brew) would ps-aux grep for the whole env PATH... below.
		##alias brew='env PATH="$(echo "$PATH" | sed -e "s/:\/usr\/local\/opt\/[^:]*://g")" brew'
	#fi
	# }

	# Source aliases.
	sourceifexists ${XDG_CONFIG_HOME:-$HOME/.config}/shell/aliases


	# Locale
	export LANG=EN_US

	# Let others know what underlying terminal emulator is used. This is needed since $TERM does not always represent the real terminal e.g. in tmux when you want colors.
	shell_is_linux && program_is_in_path urxvt && export TERMEMU=urxvt

	# Enable forward history search with ^s
	#stty stop ""

	# Web browser to use. urlscan (and others?) uses this variable.
	#if [ -n "$DISPLAY" ]; then
		#export BROWSER=firefox
	#else
		#export BROWSER=w3m
	#fi

	#if [ "$DESKTYPE" = "dwm" ]; then
		## Java does not know about dwm so GUI apps will not be displayed correctly (if at all).
		## Reference: https://wiki.archlinux.org/index.php/Dwm#Fixing_misbehaving_Java_applications
		#export _JAVA_AWT_WM_NONREPARENTING=1
	#fi

	# Brew bundler
	if shell_is_macos; then
		# Location of Brewfile. Reference: https://docs.brew.sh/Manpage#bundle-subcommand
		# Alternatively could use $(brew bundle -g) to use this file, but as I'm not dealing with other Brewfile, might as well make this one default.
		export HOMEBREW_BUNDLE_FILE=${XDG_CONFIG_HOME:-$HOME/.config}/homebrew/Brewfile
		# Not using the Brewfile.lock.json feature.
		export HOMEBREW_BUNDLE_NO_LOCK=1
	fi

	# A better compiler for C langs.
	# Unfortunately still quite some problems e.g. with compiling native extension of $(gem install byebuy)
	#if program_is_in_path clang; then
		#export CC=clang
		#export CXX=clang++
	#fi

	# Personal log folder used by some program configurations.
	test -d ${XDG_STATE_HOME:-$HOME/.local/state}/tmux || mkdir -p ${XDG_STATE_HOME:-$HOME/.local/state}/tmux
	test -d ${XDG_STATE_HOME:-$HOME/.local/state}/irssi || mkdir -p ${XDG_STATE_HOME:-$HOME/.local/state}/irssi

	# Enable sandboxing a.k.a. lazy loading of shell initialization for some programs.
	# Not possible with dfm to install to .local/share as 2 levels of recurse in dfminstall does not work.
	# See https://github.com/justone/dfm/issues/39
	sourceifexists $HOME/.local/sandboxd/sandboxd

	# Needed for gnupg's gpg(1) to work, thus for git commit signing.
	export GPG_TTY=$(tty)

	# Nice to have when fetching scanned documents
	export SCANNED=$HOME/media/images/scanned/

	if shell_is_macos; then
		# Disable macos shell restore feature (/etc/bashrc_Apple_Terminal) that creates e.g. ~/.zsh_session
		export SHELL_SESSIONS_DISABLE=1
	fi

	# Speed up dfm by telling it where the source is
	export DFM_REPO=$HOME/src/github.com/erikw/dotfiles/
# }

# UI {
	# Solarized ls colors.
	dircolorsdb=$HOME/.local/dircolors-solarized/dircolors.256dark
	if ! [ -f $dircolorsdb ]; then
		dircolorsdb=${XDG_CONFIG_HOME:-$HOME/.config}/shell/dircolors
	fi
	if program_is_in_path dircolors; then
		eval "$(dircolors -b $dircolorsdb)"
	elif shell_is_macos && program_is_in_path gdircolors; then
		eval "$(gdircolors -b $dircolorsdb)"
	fi
	unset dircolorsdb

	# Colorize ls(1) on BSD/Mac systems.
	if shell_is_bsd; then
		export CLICOLOR=1
	fi

	 # Use colorful terminal.
	 case "$TERM" in
	xterm*)		export TERM=xterm-256color ;;
	screen*)	export TERM=screen-256color ;;
	rxvt*)		export TERM=rxvt-unicode-256color ;;
	 esac



	# Colored man pages. Reference: https://wiki.archlinux.org/index.php/Man_Page#Colored_man_pages
	#
	man() {
		env \
			LESS_TERMCAP_mb=$(printf "\e[1;31m") \
			LESS_TERMCAP_md=$(printf "\e[1;31m") \
			LESS_TERMCAP_me=$(printf "\e[0m") \
			LESS_TERMCAP_se=$(printf "\e[0m") \
			LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
			LESS_TERMCAP_ue=$(printf "\e[0m") \
			LESS_TERMCAP_us=$(printf "\e[1;32m") \
				man "$@"
	}
# }

# Programs {
#  Go {
	if [ -d $HOME/src/godeps ]; then
		export GOPATH="$HOME/src/godeps/:$GOPATH"
		PATH="$HOME/src/godeps/bin:$PATH"
	fi
	if [ -d $HOME/dev/go ]; then
		export GOPATH="$HOME/dev/go/:$GOPATH"
		PATH="$HOME/dev/go/bin:$PATH"
	fi
	if [ -e "$HOME/src/github.com/golang/go" ]; then
		export GOROOT="$HOME/src/golang/go"
		PATH="$GOROOT/bin:$GOROOT/pkg/tool/linux_amd64:$PATH"
	fi
# }

# Java {
	#if [ -e /usr/libexec/java_home ] ; then
		#export JAVA_HOME=$(/usr/libexec/java_home 2>/dev/null)
		#test $? -eq 0 || unset JAVA_HOME
	#fi

	# Add ANSI color output to ant.
	#if program_is_in_path ant; then
		#export ANT_ARGS='-logger org.apache.tools.ant.listener.AnsiColorLogger'
	#fi

# }

# less {
	# Syntax highlighting for less with src-highlight.
	# Normal highlight.
	#if type src-hilite-lesspipe.sh  >/dev/null 2>&1; then
		#export LESSOPEN="| src-hilite-lesspipe.sh %s"
	#fi

	if program_is_in_path source-highlight; then
		export LESSOPEN="| /usr/local/bin/src-hilite-lesspipe.sh %s"
		# Solarized version, as the normal version does not work (hidden text) when solarized terminal background is used.
		# https://github.com/jrunning/source-highlight-solarized
		#export LESSOPEN="| source-highlight --failsafe -f esc-solarized --style-file=esc-solarized.style -i %s -o STDOUT"
	fi

	LESS=		# Debians /etc/zsh/zshenv sets LESS to values that quits less when hitting the bottom.
	#LESS="$LESS --no-lessopen"			# Disable usage of LESSOPEN.
	LESS="$LESS --RAW-CONTROL-CHARS"	# Display colors.
	LESS="$LESS --ignore-case"			# Case insensitive search. However using capital letter(s) will enable case sensitive search.
	LESS="$LESS --status-column"		# Status column with number of lines etc.
	#LESS="$LESS --LINE-NUMBERS"		# Show line numbers.
	export LESS
# }

# Ruby {
	# Homebrew ruby. NOTE not neeed when using rbenv.
	#if [ -d /usr/local/opt/ruby/bin ]; then
		# Ruby & Gems binaries
		# Correct gem dir is GEMSDIR=$(gem environment gemdir)/bin
		#export PATH="/usr/local/opt/ruby/bin:/usr/local/lib/ruby/gems/3.0.0/bin:$PATH"
	#fi

	# RVM
	#sourceifexists $HOME/.rvm/scripts/rvm

	# ruby-build: recommended build env.
	# Reference: https://github.com/rbenv/ruby-build/wiki#suggested-build-environment
	#export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@1.1)"
	if program_is_in_path ruby-build; then
		export RUBY_CONFIGURE_OPTS="--with-openssl-dir=/usr/local/opt/openssl@1.1"
	fi

	# rbenv NOTE is sandboxed
	# https://github.com/rbenv/rbenv
	#if program_is_in_path rbenv; then
		#export RBENV_ROOT=${XDG_DATA_HOME:-$HOME/.local/share}/rbenv
		#export PATH="$RBENV_ROOT/bin:$PATH"
		#export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@1.1)"
		#eval "$(rbenv init - $SHELL_NAME)"
	#fi

# }

# Python {
	# Python pip binary installation directory (pip3 install --user)
	if shell_is_macos; then
		PATH="$HOME/Library/Python/3.9/bin:$PATH"
	fi

	# Virtualenvwrapper, installed with pip. NOTE Is sandboxed
	#shell_is_macos && virtenv_path=/usr/local/bin/virtualenvwrapper.sh || virtenv_path=/usr/bin/virtualenvwrapper_lazy.sh
	#if [ -e $virtenv_path ]; then
	#	source $virtenv_path
	#	export WORKON_HOME=$HOME/.virtualenvs
	#	export PROJECT_HOME=$HOME/dev
	#fi


	#if program_is_in_path pyenv; then
		# NOTE is sandboxed
		#export PYENV_ROOT=${XDG_DATA_HOME:-$HOME/.local/share}/pyenv
		#export PATH="$PYENV_ROOT/bin:$PATH"
		#eval "$(pyenv init --path)"  # Adds shims to PATH.
		#eval "$(pyenv init -)"
		##export VIRTUAL_ENV_DISABLE_PROMPT=1
		##eval "$(pyenv virtualenv-init -)"

		# Brew should use system default python when building packages $(brew doctor) complains with
		# "config" scripts exist outside your system or Homebrew directories.
		# Solution: make an alias for brew that excludes pyenv from PATH
		# Reference: https://github.com/pyenv/pyenv/issues/106#issuecomment-625334706
		#alias brew='env PATH="${PATH//$(pyenv root)\/shims:/}" brew'
		# Combined with removal of gnubins from above (make sure to comment the first alias out for speed)
		#alias brew='env PATH="$(echo "$PATH" | sed -e "s/:\/usr\/local\/opt\/[^:]*://g" -e "s/:.*pyenv\/shims://g")" brew'
	#fi
# }

	# pkgfile (arch) "command not found" hook.
	#sourceifexists /usr/share/doc/pkgfile/command-not-found.$SHELL_NAME

	# iTerm2 shell integration. Reference: https://www.iterm2.com/documentation-shell-integration.html
	sourceifexists $HOME/.iterm2_shell_integration.$SHELL_NAME


	# Tell gPodder to reside in multimedia directory. KDE4 uses ~/.kde4/env/
	#export GPODDER_HOME=$HOME/media/music/gPodder

	# Source MPD environment variables.
	#sourceifexists ${XDG_CONFIG_HOME:-$HOME/.config}/mpd/env.sh

	# SSH agent. Source bash file if not connected from a remote SSH.
	#if [ -z "$SSH_CLIENT" ] && [ -f "$HOME/.ssh-agent" ]; then
		#. $HOME/.ssh-agent
	#fi

	# Tmuxinator initialization.
	#if [ -d $HOME/src/github.com/tmuxinator/tmuxinator/bin/ ]; then
		#PATH="$PATH:$HOME/src/github.com/tmuxinator/tmuxinator/bin/"
		#source $HOME/src/github.com/tmuxinator/tmuxinator/completion/tmuxinator.$SHELL_NAME
	#fi

	# cloc.pl
	if [ -d "$HOME/src/github.com/AlDanial/cloc" ]; then
		PATH="$PATH:$HOME/src/github.com/AlDanial/cloc"
	fi

	# Add tab completion to daemonize.
	if program_is_in_path daemonize; then
		$completion_func -cf daemonize
	fi

	# Tab complete for viw.
	if program_is_in_path viw; then
		 $completion_func -cf viw
	fi

	# Android SDK
	#if [ -d "$HOME/src/android-sdk-linux/" ]; then
		#PATH="$HOME/src/android-sdk-linux/tools/:$HOME/src/android-sdk-linux/platform-tools/:$PATH"
	#fi

	# Perl local libraries.
	# Reference: http://search.cpan.org/~haarg/local-lib-2.000015/lib/local/lib.pm http://www.perladvent.org/2009/3/
	#perl_local=$HOME/bin/perl5
	#if program_is_in_path perl && [ -d $perl_local/lib/perl5/local ]; then
		#eval $(perl -I $perl_local/lib/perl5/ -Mlocal::lib=$perl_local)
	#fi

	# Powerline plugin.
	#if shell_is_macos; then
		#export POWERLINE_ROOT=$macos_py3path/lib/python/site-packages/powerline
		#export LC_ALL=en_US.UTF-8
		#export LANG=en_US.UTF-8
	#elif shell_is_bsd; then
		#export POWERLINE_ROOT=/usr/local/lib/python3.6/site-packages/powerline
	#elif shell_is_linux; then
		#export POWERLINE_ROOT=/usr/lib/python3.7/site-packages/powerline
	#fi

	#if program_is_in_path powerline-daemon; then
		#powerline-daemon -q
	#fi

	# Load custom keymap
	# NOTE allow me or %wheeler to issue loadkeys with no password.
	#if shell_is_linux && [ -f "${XDG_CONFIG_HOME:-$HOME/.config}/loadkeys/keymap" ]; then
		#sudo loadkeys -q ${XDG_CONFIG_HOME:-$HOME/.config}/loadkeys/keymap &>/dev/null
	#fi

	# iTerm2 integration: https://iterm2.com/documentation-shell-integration.html
	# Disabled. Not used and makes shell load slower
	#test -e "${HOME}/.iterm2_shell_integration.${SHELL_NAME}" && source "${HOME}/.iterm2_shell_integration.${SHELL_NAME}"

	# Must be at the end of shell init file. but here should do...
	if program_is_in_path sdk; then
		export SDKMAN_DIR="$HOME/.sdkman"
		[[ -s "$SDKMAN_DIR/bin/sdkman-init.sh" ]] && source "$SDKMAN_DIR/bin/sdkman-init.sh"
	fi

	# Add MacTex binaries (macos) to PATH.
	# Reference: http://rkrug.github.io/LMS-test/downloads/UpdatingForElCapitan.pdf
	if [ -e /Library/TeX/texbin ]; then
		PATH="/Library/TeX/texbin:$PATH"
	fi


	# ghq
	# https://github.com/motemen/ghq
	# Set envvar to my github clones directory, use same base path as
	# $(git config --global ghq.root)
	export GITHUB=$HOME/src/github.com/erikw

	# Travis cli client. https://github.com/travis-ci/travis.rb
	sourceifexists $HOME/.travis/travis.sh

	# broot - https://dystroy.org/broot/install-br/
	sourceifexists $HOME/.config/broot/launcher/bash/br

	# fzf https://github.com/junegunn/fzf#using-homebrew
	if program_is_in_path fzf; then
		source ${XDG_CONFIG_HOME:-$HOME/.config}/fzf/fzf.${SHELL_NAME}
		# Default cli options. See fzf(1)
		export FZF_COMPLETION_OPTS='--multi'

		# Find dot files as well. Reference: https://github.com/junegunn/fzf/issues/634
		if program_is_in_path fd; then
			#export FZF_DEFAULT_COMMAND="rg --hidden --files --glob '!{.git,node_modules}/'"
			export FZF_DEFAULT_COMMAND='fd --type file --hidden --follow'
		else
			export FZF_DEFAULT_COMMAND='find . -type d \( -path './.git' -o -path './node_modules'  \) -prune -o -print'
		fi
		export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
	fi

	# Homebrew sqlite to shadow old version shipped with macOS.
	if [ -d /usr/local/opt/sqlite/ ]; then
		export PATH="/usr/local/opt/sqlite/bin:$PATH"
	fi

	# NVM
	# Let's not use NVM; slows down every shell, puts a git repo in $XDG_CONFIG_HOME...
	#if [ -d ${XDG_CONFIG_HOME:-$HOME/.config}/nvm ]; then
		#export NVM_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/nvm"
		#[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
		#[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
	#fi

	# Node manager n: https://github.com/tj/n
	export N_PREFIX=${XDG_DATA_HOME:-$HOME/.local/share}/n
	if [ -d $HOME/.n ]; then
		export PATH=$N_PREFIX/bin:$PATH
	fi

	# Homebrew curl
	if [ -d /usr/local/opt/curl/bin ]; then
		export PATH="/usr/local/opt/curl/bin:$PATH"
	fi
# }
